plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'eclipse'
	//Devops code start
	id 'pl.allegro.tech.build.axion-release' version '1.12.0'
	id 'com.palantir.docker' version '0.25.0'
	id 'com.palantir.docker-run' version '0.25.0'
	id 'jp.classmethod.aws.cloudformation' version '0.41'
	id 'com.palantir.docker-compose' version '0.22.1'
	id 'jacoco'
	id 'org.sonarqube' version '3.0'
	//Devops code end
}

group = 'com.szells'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

repositories {
	mavenCentral()
	//devops code start
	jcenter()
	//devops code End
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	
	compile group: 'org.springframework.boot', name: 'spring-boot-devtools', version: '2.3.1.RELEASE'
	
	compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-zuul', version: '2.2.3.RELEASE'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	//Devops code starts here
	annotationProcessor 'org.projectlombok:lombok:1.18.12'
	//Devops code ends here
	//compile ('com.fasterxml.jackson.core:jackson-databind:2.9.8')
	
	/*
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	*/
}

/*
test {
	useJUnitPlatform()
}
*/
// Devops code start//
String dockerHubUsernameProperty = findProperty('dockerHubUsername') ?: 'cmidhun'
String imageName = "${dockerHubUsernameProperty}/sso-integration-proxy:$version"

docker {
	name imageName
	files "build/libs/${bootJar.archiveFileName.get()}"
	buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

dockerRun {
	name project.name
	image imageName
	ports '8080:8080'
	clean true
}

sonarqube {
	properties {
		property 'sonar.host.url', 'http://localhost:9000'
	}
}

tasks['sonarqube'].dependsOn test

// Devops code end//